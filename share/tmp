화투님 안녕하세요~
(지난 미션도… 리뷰해주시고 있는데.. 팀과제도 화투님이 되셨네요.. ㅎ)
저희 팀이 일단은 프론트로 나눠져서 진행을 하게되어서 백엔드 관련 부분만 먼저 리뷰요청을 드립니다.
감사합니다.
———
그리고 추가로 여쭤볼 부분이 있습니다.!
저희 팀에서… 테스트 코드 관련해서 논쟁?이 있었습니다..
한가지 방식으로는 .sql 로 테스트에서 사용할 데이터를 추가해놓는 방식이고
다른 방식으로는 매번 테스트에서 생성(결과적으로 코드를 통해서 테스트 데이터를 생성) 하는 방식입니다.
(현재.. 게시글, 댓글 관련해서는 첫번째 방식, 유저 관련 경우 두번째 방식으로 구현해놓았습니다.)
2가지 방식중에 화투님께서는 어떻게 생각하시는지
평상시에는 어떻게 생각하시는지가 궁금합니다.
저희가 이야기한 바로는
.sql 방식을 사용할 때는
- 장점
   - 내가 원하는 상황을 미리 생성해놓을 수 있음 (예를 들어서 특정 댓글이 내가 원하는 게시글과 유저와 연관되어 있을때 -> ex. 해당 유저가 작성한 댓글)
   - 미리 데이터가 생성되어 있음 (한번만 생성, 이용)
- 단점
   - 미리 .sql 에서 생성해놓은 것들을 테스트 작성자가 인지하고 있어야 함 (해당 데이터를 언제쓸지 -> ex. 해당 데이터는 삭제 테스트용 데이터, 다른 읽기등이 사용하면 안됨)
   - .sql 에서 사용된 값을 테스트 코드에 복사/붙여넣기로 사용해야함 (.sql 데이터가 변경될 경우 -> ex. 비밀번호 정책 변경)
매번 테스트에서 생성할 때는
- 장점
   - 다른 테스트와 독립되어 있음 (자신이 사용할 데이터를 생성)
   - 생성된 데이터를 코드로 접근 가능 (테스트 값이 변경되어도 코드에서 변경할 게 없음)
- 단점
   - 매번 생성하는 비용
   - 특정한 조건을 만들기 위해서 해주어야 할게 많음 (코드를 예쁘게 정리하면 될 것도 같지만… 그게 쉽진 않을 것도 같네요 -> ex. 해당 유저가 작성한 댓글이 존재하는 상황을 만들때)
각자가 장/단점이 존재하고
프로젝트 규모나 함께하는 사람들이 많을 때에 따라서도 중요한 부분이 달라질 것도 같네요…
혹시 어떤 상황(팀의 규모, 프로젝트 규모)에 어떤 부분들을 중요하게 생각하시는지 화투님의 생각을 알고 싶습니다..ㅎ
화투(박현식) 5:43 PM
안녕하세요. 미스터코.
나중에 답변을 드린다고 해놓고 깜빡하고 연락을 못드렸네요. :disappointed:
두가지 방식 중 하나의 택일 보다는 둘 다 사용하신다고 보시면 될 것 같아요.
DB에 저장되는 데이터가 항상 테스트를 위한 데이터만 있는 것이 아니라
도메인 전반에 걸쳐서 필수적으로 사용되는 메타데이터 성격의 데이터가 있을 수 있는데
이러한 데이터는 sql로의 초기화가 적합합니다.
(제가 핀테크에서 일하다보니 여기로 예를 들어드리면 각 카드사, 은행등에 대한 메타 정보, 은행 영업일, 카드사 매입일 등등)
이러한 데이터는 테스트마다 일일히 추가하기 어렵기 때문에 sql등으로 초기화합니다.
그 외에 발생하는 테스트 케이스에 대해서는 각 테스트별로 독립 시키는게 적합하다고 봐요. :slightly_smiling_face:
화투(박현식) 6:17 PM
안녕하세요! 미스터코.
저번 피드백 사항 이후 추가 리뷰요청이 없는데요.
리뷰요청을 깜빡하신건지, 혹은
아직 진행하고 계신건지 궁금해서 연락드렸어요. :slightly_smiling_face:
미스터코(고은석) 6:18 PM
앗 먼저 연락주셔서 감사합니다..!!
팀 리뷰도 있었어서.. 조금 미뤄지고 있었습니다..ㅠ!!
프론트.. 에서 분리하는 부분을 제외하고는 일단 다른 피드백들은 전체적으로 적용해놓은 상태입니다..!!!
오늘 밤중에 보내놓을께요..!!
오랜기간 감사합니다..!! 기다리시는 분이 더 조마조마하실거같네요..ㅠ!!
화투(박현식) 6:21 PM
넵넵 아니에요. 궁금해서 연락드린거고 천천히 리뷰요청 주세요. :slightly_smiling_face:
:+1:
1
:man-gesturing-ok:
1

화투(박현식) 6:58 PM
미스터코 안녕하세요! 저번주 조별 리뷰에서 질문들에 대한 답 몇가지 추가했어요.
머지된 풀리퀘스트라 확인을 못할수도 있을 것 같아서 혹시 몰라 연락드려요. :slightly_smiling_face:
미스터코(고은석) 5:29 PM
화투님 안녕하세요..! 답 달아주신 부분 확인했습니다 ㅎ 생각해보니깐 알림도 안갔을텐데… 답변까지 달아주시고 연락주시고.. 언제나 감사합니다..!!
미스터코(고은석) 1:59 PM
화투님 안녕하세요..!! 피드백 달아 주셔서 감사합니다.. (머지 전에 적용하지 못했네요)
달아 주신 부분 중에서 조금 더 여쭤보고 싶은 부분이 있어서 질문 남겨보아요… :slightly_smiling_face:
Q1. 친구와 친구의 친구들, 방문자수가 많으면 많을수록 너무 한꺼번에 많은 데이터를 처리할 것 같은데요.
성능에 영향을 덜 줄수 있는 다른 방법도 고민해보면 어떨까요?
예를들어 전체를 다 계산하지 않고 후보에 대해서 일부만 제공한다던가요.  (https://github.com/woowacourse/miniprojects-2019/pull/29#discussion_r319721338)
되게 많이 공감이 되었던 부분입니다. 특히 친구가 100명정도 된다고 할 경우, 친구의 친구의 수는 100만명 단위여서요. (특히 친구가 많은 사람들이라면...)  
특히 각 유저마다 필요한 데이터여서 캐시를 해놓기에도 부담이 클 듯 하구요

즉.. 전체 데이터를 사용하려면.. 시간이든 공간이든 한 쪽은 부담이 매우 클 것 같습니다. 일단 친구 후보 데이터 자체가 크네요.. (혹시나 방법이 있다면.. 실제 서비스와는 다른 서버? 같은 곳에서 돌려서.. 중요한 서비스에는 영향을 미치지 않도록 하면서 전체 데이터를 사용하는 정도 일 것 같구요. 전체 데이터를 사용하면서 더 좋은 방법이 있을까요??)

그래서 예를 들어주신 것처럼.. 일부에 대해서 고민하는 방식을 사용해야 할 것 같습니다.

데이터의 일부분만 사용할 때 고민되는 부분은.. 후보를 얻는 이유가 랭킹을 제공하기 때문입니다. (물론 전체 데이터로부터 정확한 랭킹 순서가 필요한게 아니라고 한다면 일부분만 잘 찾아와도 좋을 것 같습니다..!)  

지금 생각나는 방식은 일단 샘플을 잘 골라내는 것 (페이징 처럼.. 특정 친구 수 만큼 찾아와서.. 그 안에서 랭킹을 내서 보여주는 방식일 것 같아요) 정도 인 것 같습니다.  

이렇게 랭킹을 매겨야 하는데 전체 데이터를 쓰지 못할 경우에 사용할 수 있는 방식이 있을까요? (키워드 자체가 생각이 안납니다...ㅠ)
먼가 구글 같은 경우가 비슷한 경우일지도 모르겠네요..

아니면 화투님 같은 경우는 어떻게 접근하실 것 같은지 의견을 말씀해 주실수 있을까요?? :)
Q2. 방문자 카운터가 배포시마다 초기화가 되거나, 서버마다 다른 데이터를 보여 줄 수 있겠네요. :)
지금에 고칠건 아니지만 그냥 한번 이런 경우 어떻게 하면 좋았을지에 대해 고민해보는것도 좋을 것 같습니다.  (https://github.com/woowacourse/miniprojects-2019/pull/29#discussion_r319721455)
이 부분도.. 문제가 있다고 생각했는데 피드백 주셔서 감사했습니다..!  
체스때 피드백 주신 부분과도 겹쳐있는데.. DB 처럼 모든 서버가 공유하지 못하는 자원을 사용하고 있습니다.  

방문자를 카운팅하는 것은.. 실제 서비스하고 싶은 주요 기능보단 부가 기능 같아서 일단 db에 직접 저장하는 것은 부담이 아닌가 했었습니다.  
그래서 메모리 상에서 카운팅을 하고 나중에 (특정 주기로) 비휘발성인 곳에 적어 놓는 것을 생각했습니다.  
지금 생각하는 해결 방식은 캐시입니다. 글로벌 캐시(다른 서버들에게서도 공유되는)를 사용하려고 하고 있습니다. (레디스라는게 있다는데 좀 살펴보려합니다.)  

한편으로는 제이슨께 로그 형태로 데이터를 수집하고 나중에 해당 데이터를 가공하는 형태로도 정보를 수집하는 형태도 있다고 들었습니다. (실시간으로 카운팅된 정보가 필요할 것 같지 않아서.. 나중에 가공하는 방식을 생각하면 많은 방법이 존재할 것 같네요)  


서비스를 운영하는 기업의 경우 데이터를 쌓는 부분이 필수 일 것 같습니다.. 혹시 일하시는 곳이나 아시는 곳에선 어떤 식으로 필요한 데이터를 수집하는지, 어떻게 사용하는지 알 수 있을까요??

현재는 인터셉터를 사용해서 카운팅을 하고 있는데... 이 위치에서 카운팅 정보를 수집하는게 올바를까 싶기도 하고요...
로그를 남기는 경우, 운영 코드 내부에서 로그로 데이터를 수집하면 불필요한 로직이 보이는 것 같아서.. 다른 곳 (ex. 데코레이터 패턴 처럼.. 실제 서비스 코드에서는 보이지는 않지만.. 함께 호출되는 곳) 에서 적는게 좋을 것도 같구요

정리하면..
1. 어떤 위치에서 정보를 수집하는게 좋을지
2. 어떤 형태로 정보를 수집하면 좋을지
로 볼 수 있을 것 같아요
항상 상세히 피드백 주셔서, 어떤 부분을 고민해야 하는지 생각할 수 있어서 감사해요..!
화투(박현식) 12:33 AM
안녕하세요! 미스터코. 2단계 진행하시느라 정말 수고 많으셨어요. :slightly_smiling_face:
Q1. 지금과 같이 RDB를 통해서 데이터를 구한다면 요청건마다 데이터를 다시 만드는게 아닌 미리 만드는 방법이 있을 것 같아요.
매일 배치를 통해 각 유저별로의 추천 및 랭킹에 대한 데이터를 만들어놓고 이를 활용하는 방법이에요.
다만 이것 보다는 다른 솔루션을 쓰는게 더 나을 것 같네요.
저도 직접 사용해보진 않았지만 이러한 요구사항에 많이 사용하는 것들 중 그래프 데이터베이스가 있는데 이게 지금 원하는 기능에 가장 적합해보여요. 대표적으로는 neo4j라는게 있는데 한번 살펴보세요.
https://aws.amazon.com/ko/nosql/graph/
http://www.itworld.co.kr/news/108653
https://javacan.tistory.com/entry/Neo4j-Introduction
Q2.
수집 방법에 대해서는 지금 말씀하신것 처럼 레디스를 활용하기도 하고, 제이슨 말대로 로그를 쌓고 후처리로 구하는 방법도 될꺼에요, 아니면 로그를 엘라스틱 서치 등으로 수집하여 원하는 데이터를 구하고, 레디스도 같이 활용할 수 있겠네요.
이벤트 소싱처럼 RDB에 접근 로그를 계속 쌓고, 카운팅 쿼리로 가져오면서 중간 중간 카운팅 스냅샷을 찍는 방법도 있을거에요.
(단순 insert 작업이면 그렇게 DB에 부담을 주진 않을거에요.)
디비가 아니라 레디스에 수집하고 RDB에 스냅샷을 저장하는 방법도 있구요.
지표를 수집하는 위치에 대해서, 결국엔 현재 카운팅이 비즈니스에 대한 지표인데요, 이건 정확히 어떤 케이스에 대해서 지표를 수집하고 싶냐에 따라 다를 것 같아요.
다만 비즈니스 코드에 직접 녹이지는 않고 AOP를 통해서 간접적으로 수집하는 경우가 더 많아요. 지금 말씀하신 인터셉터가 AOP의 종류중 하나라고 보시면 될 것 같아요.
ITWorld KoreaITWorld Korea
연결된 데이터베이스 저장에 유용한 ‘그래프 데이터베이스’의 이해
키 값, 문서 지향, 컬럼 패밀리, 그래프, 관계형… 오늘날 데이터베이스의 종류는 데이터의 종류만큼 다양한 듯하다. 덕분에 데이터베이스를 선택하기는 더 어려울지 몰라도 적절한 데이터베이스를 선택하기는 더 쉽다. 물론 숙제가 필요하다. 데이터베이스에 대해 알아야 한다.현재 시장에서 이해도가 가장 낮은 데이터베이스 유형 중 하나는 그래프 데이터베이스다. 고도로 상호 연결된 데이터에 적합하도록 설계된 그래프 데이터베이스는 관계형 데이터베이
자바캔(Java Can Do IT)자바캔(Java Can Do IT)
Neo4j 소개
소셜 네트워크 서비스의 특징은 뭘까? 또는 요즘 서비스들의 특징은 뭘까? 한마디로 정의할 수는 없겠지만, 두드러진 특징 중 하나는 바로 데이터의 '관계(relation)'에 있다. 친구 관계, 사용자와 영화와의 관계,..
Jun 8th, 2012
(12 kB)
